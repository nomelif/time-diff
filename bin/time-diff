#!/usr/bin/python
import os
import sys
import select
import traceback
import locale


ROOT_PATH = os.path.abspath(os.path.abspath(os.path.dirname(__file__)) + '/../')
TIMEDIFF_PATH = os.path.join(ROOT_PATH, 'timediff')

sys.path.append(TIMEDIFF_PATH)

import log_parser
import cli_input
import cli_output

help = """Use by piping file (or greped lines) to program.

ARGUMENTS (All are mandatory)


-h        : Show this help
-f=       : Set datetime format options, defaults to "%Y%m%d_%H%M%S" overrides given presets
-F=       : Set datetime formatting preset, defaults to none, accepted values are:

	* custom1 : "%b %d %H:%M:%S"
-l=       : Sets locale to be used with parsing month and weekday names, defaults to American English (en_US on unix, en-US on Windows).
-v        : Sets program to verbose mode, errors will be written to console.
-p        : Cancels adding zero-padding, eg. without -p 2 would become 02"""
log_parser = log_parser.LogParser()
cli_in = cli_input.CliInput()
cli_out = cli_output.CliOutput()
format = "%Y%m%d_%H%M%S"
parse_logs = False
if select.select([sys.stdin,],[],[],0.0)[0]:
	args = cli_in.get_params_dict(sys.argv)
	if args["-F"] != None or args["-f"] != None:
		if args["-F"] != None and args["-f"] != None:
			format = args["-f"]
		elif args["-F"] != None:
			if args["-F"] == "custom1":
				format = "%b %d %H:%M:%S"
		else:
			format = args["-f"]
	eng_locale = "en_US"
	if args["-l"]  != None:
		try:
			locale.setlocale(locale.LC_ALL, args["l"])
		except:
			if args["-v"]:
				print("Unknown locale or locale not installed, setting locale to {0}".format(eng_locale))
	else:
		try:
			locale.setlocale(locale.LC_ALL, eng_locale)
		except:
			if args["-v"]:
				print("Locale en_US not installed, setting locale to system default.")
			locale.setlocale(locale.LC_ALL, "")
	parse_logs = True
else:
    if cli_in.get_params_dict(sys.argv)["-h"]:
    	print(help)
    else:
    	print("No input specified")
logs = log_parser.parse_logs(cli_in.get_log_arr(sys.stdin), args, format)
if parse_logs:
	for line in logs:
		try:
			print(cli_out.format_line(line))
		except Exception, v:
			if args["-v"]:
				print("\n\n----------------------\nError in python code:\n\n")
				traceback.print_tb(sys.exc_traceback)
				print("\n\n\t{0}\n\n----------------------".format(v.args[0]))
			print("Pattern \"{0}\" does not match logs".format(format))